{"ast":null,"code":"!function (globals) {\n  'use strict';\n\n  var _imports = {};\n\n  if (typeof module !== 'undefined' && module.exports) {\n    //CommonJS\n    _imports.bytesToHex = require('convert-hex').bytesToHex;\n    _imports.convertString = require('convert-string');\n    module.exports = sha256;\n  } else {\n    _imports.bytesToHex = globals.convertHex.bytesToHex;\n    _imports.convertString = globals.convertString;\n    globals.sha256 = sha256;\n  }\n  /*\r\n  CryptoJS v3.1.2\r\n  code.google.com/p/crypto-js\r\n  (c) 2009-2013 by Jeff Mott. All rights reserved.\r\n  code.google.com/p/crypto-js/wiki/License\r\n  */\n  // Initialization round constants tables\n\n\n  var K = []; // Compute constants\n\n  !function () {\n    function isPrime(n) {\n      var sqrtN = Math.sqrt(n);\n\n      for (var factor = 2; factor <= sqrtN; factor++) {\n        if (!(n % factor)) return false;\n      }\n\n      return true;\n    }\n\n    function getFractionalBits(n) {\n      return (n - (n | 0)) * 0x100000000 | 0;\n    }\n\n    var n = 2;\n    var nPrime = 0;\n\n    while (nPrime < 64) {\n      if (isPrime(n)) {\n        K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n        nPrime++;\n      }\n\n      n++;\n    }\n  }();\n\n  var bytesToWords = function bytesToWords(bytes) {\n    var words = [];\n\n    for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n      words[b >>> 5] |= bytes[i] << 24 - b % 32;\n    }\n\n    return words;\n  };\n\n  var wordsToBytes = function wordsToBytes(words) {\n    var bytes = [];\n\n    for (var b = 0; b < words.length * 32; b += 8) {\n      bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);\n    }\n\n    return bytes;\n  }; // Reusable object\n\n\n  var W = [];\n\n  var processBlock = function processBlock(H, M, offset) {\n    // Working variables\n    var a = H[0],\n        b = H[1],\n        c = H[2],\n        d = H[3];\n    var e = H[4],\n        f = H[5],\n        g = H[6],\n        h = H[7]; // Computation\n\n    for (var i = 0; i < 64; i++) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        var gamma0x = W[i - 15];\n        var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n        var gamma1x = W[i - 2];\n        var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n\n      var ch = e & f ^ ~e & g;\n      var maj = a & b ^ a & c ^ b & c;\n      var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n      var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n      var t1 = h + sigma1 + ch + K[i] + W[i];\n      var t2 = sigma0 + maj;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    } // Intermediate hash value\n\n\n    H[0] = H[0] + a | 0;\n    H[1] = H[1] + b | 0;\n    H[2] = H[2] + c | 0;\n    H[3] = H[3] + d | 0;\n    H[4] = H[4] + e | 0;\n    H[5] = H[5] + f | 0;\n    H[6] = H[6] + g | 0;\n    H[7] = H[7] + h | 0;\n  };\n\n  function sha256(message, options) {\n    ;\n\n    if (message.constructor === String) {\n      message = _imports.convertString.UTF8.stringToBytes(message);\n    }\n\n    var H = [0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19];\n    var m = bytesToWords(message);\n    var l = message.length * 8;\n    m[l >> 5] |= 0x80 << 24 - l % 32;\n    m[(l + 64 >> 9 << 4) + 15] = l;\n\n    for (var i = 0; i < m.length; i += 16) {\n      processBlock(H, m, i);\n    }\n\n    var digestbytes = wordsToBytes(H);\n    return options && options.asBytes ? digestbytes : options && options.asString ? _imports.convertString.bytesToString(digestbytes) : _imports.bytesToHex(digestbytes);\n  }\n\n  sha256.x2 = function (message, options) {\n    return sha256(sha256(message, {\n      asBytes: true\n    }), options);\n  };\n}(this);","map":{"version":3,"sources":["C:/Users/mehr0/Documents/Dev/simpleforum/hwryeol_simpleforum/node_modules/sha256/lib/sha256.js"],"names":["globals","_imports","module","exports","bytesToHex","require","convertString","sha256","convertHex","K","isPrime","n","sqrtN","Math","sqrt","factor","getFractionalBits","nPrime","pow","bytesToWords","bytes","words","i","b","length","wordsToBytes","push","W","processBlock","H","M","offset","a","c","d","e","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","message","options","constructor","String","UTF8","stringToBytes","m","l","digestbytes","asBytes","asString","bytesToString","x2"],"mappings":"AAAA,CAAC,UAASA,OAAT,EAAkB;AACnB;;AAEA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,OAA5C,EAAqD;AAAE;AACrDF,IAAAA,QAAQ,CAACG,UAAT,GAAsBC,OAAO,CAAC,aAAD,CAAP,CAAuBD,UAA7C;AACAH,IAAAA,QAAQ,CAACK,aAAT,GAAyBD,OAAO,CAAC,gBAAD,CAAhC;AACAH,IAAAA,MAAM,CAACC,OAAP,GAAiBI,MAAjB;AACD,GAJD,MAIO;AACLN,IAAAA,QAAQ,CAACG,UAAT,GAAsBJ,OAAO,CAACQ,UAAR,CAAmBJ,UAAzC;AACAH,IAAAA,QAAQ,CAACK,aAAT,GAAyBN,OAAO,CAACM,aAAjC;AACAN,IAAAA,OAAO,CAACO,MAAR,GAAiBA,MAAjB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAIE,CAAC,GAAG,EAAR,CAvBmB,CAyBnB;;AACA,GAAC,YAAY;AACX,aAASC,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,UAAIC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUH,CAAV,CAAZ;;AACA,WAAK,IAAII,MAAM,GAAG,CAAlB,EAAqBA,MAAM,IAAIH,KAA/B,EAAsCG,MAAM,EAA5C,EAAgD;AAC9C,YAAI,EAAEJ,CAAC,GAAGI,MAAN,CAAJ,EAAmB,OAAO,KAAP;AACpB;;AAED,aAAO,IAAP;AACD;;AAED,aAASC,iBAAT,CAA2BL,CAA3B,EAA8B;AAC5B,aAAQ,CAACA,CAAC,IAAIA,CAAC,GAAG,CAAR,CAAF,IAAgB,WAAjB,GAAgC,CAAvC;AACD;;AAED,QAAIA,CAAC,GAAG,CAAR;AACA,QAAIM,MAAM,GAAG,CAAb;;AACA,WAAOA,MAAM,GAAG,EAAhB,EAAoB;AAClB,UAAIP,OAAO,CAACC,CAAD,CAAX,EAAgB;AACdF,QAAAA,CAAC,CAACQ,MAAD,CAAD,GAAYD,iBAAiB,CAACH,IAAI,CAACK,GAAL,CAASP,CAAT,EAAY,IAAI,CAAhB,CAAD,CAA7B;AACAM,QAAAA,MAAM;AACP;;AAEDN,MAAAA,CAAC;AACF;AACF,GAxBA,EAAD;;AA0BA,MAAIQ,YAAY,GAAG,SAAfA,YAAe,CAAUC,KAAV,EAAiB;AAClC,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAApB,EAAuBD,CAAC,GAAGF,KAAK,CAACI,MAAjC,EAAyCF,CAAC,IAAIC,CAAC,IAAI,CAAnD,EAAsD;AACpDF,MAAAA,KAAK,CAACE,CAAC,KAAK,CAAP,CAAL,IAAkBH,KAAK,CAACE,CAAD,CAAL,IAAa,KAAKC,CAAC,GAAG,EAAxC;AACD;;AACD,WAAOF,KAAP;AACD,GAND;;AAQA,MAAII,YAAY,GAAG,SAAfA,YAAe,CAAUJ,KAAV,EAAiB;AAClC,QAAID,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAAN,GAAe,EAAnC,EAAuCD,CAAC,IAAI,CAA5C,EAA+C;AAC7CH,MAAAA,KAAK,CAACM,IAAN,CAAYL,KAAK,CAACE,CAAC,KAAK,CAAP,CAAL,KAAoB,KAAKA,CAAC,GAAG,EAA9B,GAAqC,IAAhD;AACD;;AACD,WAAOH,KAAP;AACD,GAND,CA5DmB,CAoEnB;;;AACA,MAAIO,CAAC,GAAG,EAAR;;AAEA,MAAIC,YAAY,GAAG,SAAfA,YAAe,CAAUC,CAAV,EAAaC,CAAb,EAAgBC,MAAhB,EAAwB;AACzC;AACA,QAAIC,CAAC,GAAGH,CAAC,CAAC,CAAD,CAAT;AAAA,QAAcN,CAAC,GAAGM,CAAC,CAAC,CAAD,CAAnB;AAAA,QAAwBI,CAAC,GAAGJ,CAAC,CAAC,CAAD,CAA7B;AAAA,QAAkCK,CAAC,GAAGL,CAAC,CAAC,CAAD,CAAvC;AACA,QAAIM,CAAC,GAAGN,CAAC,CAAC,CAAD,CAAT;AAAA,QAAcO,CAAC,GAAGP,CAAC,CAAC,CAAD,CAAnB;AAAA,QAAwBQ,CAAC,GAAGR,CAAC,CAAC,CAAD,CAA7B;AAAA,QAAkCS,CAAC,GAAGT,CAAC,CAAC,CAAD,CAAvC,CAHyC,CAKvC;;AACF,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIA,CAAC,GAAG,EAAR,EAAY;AACVK,QAAAA,CAAC,CAACL,CAAD,CAAD,GAAOQ,CAAC,CAACC,MAAM,GAAGT,CAAV,CAAD,GAAgB,CAAvB;AACD,OAFD,MAEO;AACL,YAAIiB,OAAO,GAAGZ,CAAC,CAACL,CAAC,GAAG,EAAL,CAAf;AACA,YAAIkB,MAAM,GAAI,CAAED,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,CAAhC,KACEA,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,EADhC,IAECA,OAAO,KAAK,CAF3B;AAIA,YAAIE,OAAO,GAAGd,CAAC,CAACL,CAAC,GAAG,CAAL,CAAf;AACA,YAAIoB,MAAM,GAAI,CAAED,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,EAAhC,KACEA,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,EADhC,IAECA,OAAO,KAAK,EAF3B;AAIAd,QAAAA,CAAC,CAACL,CAAD,CAAD,GAAOkB,MAAM,GAAGb,CAAC,CAACL,CAAC,GAAG,CAAL,CAAV,GAAoBoB,MAApB,GAA6Bf,CAAC,CAACL,CAAC,GAAG,EAAL,CAArC;AACD;;AAED,UAAIqB,EAAE,GAAKR,CAAC,GAAGC,CAAL,GAAW,CAACD,CAAD,GAAKE,CAA1B;AACA,UAAIO,GAAG,GAAIZ,CAAC,GAAGT,CAAL,GAAWS,CAAC,GAAGC,CAAf,GAAqBV,CAAC,GAAGU,CAAnC;AAEA,UAAIY,MAAM,GAAG,CAAEb,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,CAApB,KAA4BA,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,EAA9C,KAAuDA,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,EAAzE,CAAb;AACA,UAAIc,MAAM,GAAG,CAAEX,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,CAApB,KAA4BA,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,EAA9C,KAAuDA,CAAC,IAAI,CAAN,GAAaA,CAAC,KAAK,EAAzE,CAAb;AAEA,UAAIY,EAAE,GAAGT,CAAC,GAAGQ,MAAJ,GAAaH,EAAb,GAAkBlC,CAAC,CAACa,CAAD,CAAnB,GAAyBK,CAAC,CAACL,CAAD,CAAnC;AACA,UAAI0B,EAAE,GAAGH,MAAM,GAAGD,GAAlB;AAEAN,MAAAA,CAAC,GAAGD,CAAJ;AACAA,MAAAA,CAAC,GAAGD,CAAJ;AACAA,MAAAA,CAAC,GAAGD,CAAJ;AACAA,MAAAA,CAAC,GAAID,CAAC,GAAGa,EAAL,GAAW,CAAf;AACAb,MAAAA,CAAC,GAAGD,CAAJ;AACAA,MAAAA,CAAC,GAAGV,CAAJ;AACAA,MAAAA,CAAC,GAAGS,CAAJ;AACAA,MAAAA,CAAC,GAAIe,EAAE,GAAGC,EAAN,GAAY,CAAhB;AACD,KAxCwC,CA0CzC;;;AACAnB,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAQA,CAAC,CAAC,CAAD,CAAD,GAAOG,CAAR,GAAa,CAApB;AACAH,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAQA,CAAC,CAAC,CAAD,CAAD,GAAON,CAAR,GAAa,CAApB;AACAM,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAQA,CAAC,CAAC,CAAD,CAAD,GAAOI,CAAR,GAAa,CAApB;AACAJ,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAQA,CAAC,CAAC,CAAD,CAAD,GAAOK,CAAR,GAAa,CAApB;AACAL,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAQA,CAAC,CAAC,CAAD,CAAD,GAAOM,CAAR,GAAa,CAApB;AACAN,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAQA,CAAC,CAAC,CAAD,CAAD,GAAOO,CAAR,GAAa,CAApB;AACAP,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAQA,CAAC,CAAC,CAAD,CAAD,GAAOQ,CAAR,GAAa,CAApB;AACAR,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAQA,CAAC,CAAC,CAAD,CAAD,GAAOS,CAAR,GAAa,CAApB;AACD,GAnDD;;AAqDA,WAAS/B,MAAT,CAAgB0C,OAAhB,EAAyBC,OAAzB,EAAkC;AAAC;;AACjC,QAAID,OAAO,CAACE,WAAR,KAAwBC,MAA5B,EAAoC;AAClCH,MAAAA,OAAO,GAAGhD,QAAQ,CAACK,aAAT,CAAuB+C,IAAvB,CAA4BC,aAA5B,CAA0CL,OAA1C,CAAV;AACD;;AAED,QAAIpB,CAAC,GAAE,CAAE,UAAF,EAAc,UAAd,EAA0B,UAA1B,EAAsC,UAAtC,EACE,UADF,EACc,UADd,EAC0B,UAD1B,EACsC,UADtC,CAAP;AAGA,QAAI0B,CAAC,GAAGpC,YAAY,CAAC8B,OAAD,CAApB;AACA,QAAIO,CAAC,GAAGP,OAAO,CAACzB,MAAR,GAAiB,CAAzB;AAEA+B,IAAAA,CAAC,CAACC,CAAC,IAAI,CAAN,CAAD,IAAa,QAAS,KAAKA,CAAC,GAAG,EAA/B;AACAD,IAAAA,CAAC,CAAC,CAAEC,CAAC,GAAG,EAAJ,IAAU,CAAX,IAAiB,CAAlB,IAAuB,EAAxB,CAAD,GAA+BA,CAA/B;;AAEA,SAAK,IAAIlC,CAAC,GAAC,CAAX,EAAeA,CAAC,GAACiC,CAAC,CAAC/B,MAAnB,EAA2BF,CAAC,IAAI,EAAhC,EAAoC;AAClCM,MAAAA,YAAY,CAACC,CAAD,EAAI0B,CAAJ,EAAOjC,CAAP,CAAZ;AACD;;AAED,QAAImC,WAAW,GAAGhC,YAAY,CAACI,CAAD,CAA9B;AACA,WAAOqB,OAAO,IAAIA,OAAO,CAACQ,OAAnB,GAA6BD,WAA7B,GACAP,OAAO,IAAIA,OAAO,CAACS,QAAnB,GAA8B1D,QAAQ,CAACK,aAAT,CAAuBsD,aAAvB,CAAqCH,WAArC,CAA9B,GACAxD,QAAQ,CAACG,UAAT,CAAoBqD,WAApB,CAFP;AAGD;;AAEDlD,EAAAA,MAAM,CAACsD,EAAP,GAAY,UAASZ,OAAT,EAAkBC,OAAlB,EAA2B;AACrC,WAAO3C,MAAM,CAACA,MAAM,CAAC0C,OAAD,EAAU;AAAES,MAAAA,OAAO,EAAC;AAAV,KAAV,CAAP,EAAoCR,OAApC,CAAb;AACD,GAFD;AAIC,CAxJA,CAwJC,IAxJD,CAAD","sourcesContent":["!function(globals) {\r\n'use strict'\r\n\r\nvar _imports = {}\r\n\r\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\r\n  _imports.bytesToHex = require('convert-hex').bytesToHex\r\n  _imports.convertString = require('convert-string')\r\n  module.exports = sha256\r\n} else {\r\n  _imports.bytesToHex = globals.convertHex.bytesToHex\r\n  _imports.convertString = globals.convertString\r\n  globals.sha256 = sha256\r\n}\r\n\r\n/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n\r\n// Initialization round constants tables\r\nvar K = []\r\n\r\n// Compute constants\r\n!function () {\r\n  function isPrime(n) {\r\n    var sqrtN = Math.sqrt(n);\r\n    for (var factor = 2; factor <= sqrtN; factor++) {\r\n      if (!(n % factor)) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  function getFractionalBits(n) {\r\n    return ((n - (n | 0)) * 0x100000000) | 0\r\n  }\r\n\r\n  var n = 2\r\n  var nPrime = 0\r\n  while (nPrime < 64) {\r\n    if (isPrime(n)) {\r\n      K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3))\r\n      nPrime++\r\n    }\r\n\r\n    n++\r\n  }\r\n}()\r\n\r\nvar bytesToWords = function (bytes) {\r\n  var words = []\r\n  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\r\n    words[b >>> 5] |= bytes[i] << (24 - b % 32)\r\n  }\r\n  return words\r\n}\r\n\r\nvar wordsToBytes = function (words) {\r\n  var bytes = []\r\n  for (var b = 0; b < words.length * 32; b += 8) {\r\n    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)\r\n  }\r\n  return bytes\r\n}\r\n\r\n// Reusable object\r\nvar W = []\r\n\r\nvar processBlock = function (H, M, offset) {\r\n  // Working variables\r\n  var a = H[0], b = H[1], c = H[2], d = H[3]\r\n  var e = H[4], f = H[5], g = H[6], h = H[7]\r\n\r\n    // Computation\r\n  for (var i = 0; i < 64; i++) {\r\n    if (i < 16) {\r\n      W[i] = M[offset + i] | 0\r\n    } else {\r\n      var gamma0x = W[i - 15]\r\n      var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                    ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                    (gamma0x >>> 3)\r\n\r\n      var gamma1x = W[i - 2];\r\n      var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                    ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                    (gamma1x >>> 10)\r\n\r\n      W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n    }\r\n\r\n    var ch  = (e & f) ^ (~e & g);\r\n    var maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n    var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n    var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n    var t1 = h + sigma1 + ch + K[i] + W[i];\r\n    var t2 = sigma0 + maj;\r\n\r\n    h = g;\r\n    g = f;\r\n    f = e;\r\n    e = (d + t1) | 0;\r\n    d = c;\r\n    c = b;\r\n    b = a;\r\n    a = (t1 + t2) | 0;\r\n  }\r\n\r\n  // Intermediate hash value\r\n  H[0] = (H[0] + a) | 0;\r\n  H[1] = (H[1] + b) | 0;\r\n  H[2] = (H[2] + c) | 0;\r\n  H[3] = (H[3] + d) | 0;\r\n  H[4] = (H[4] + e) | 0;\r\n  H[5] = (H[5] + f) | 0;\r\n  H[6] = (H[6] + g) | 0;\r\n  H[7] = (H[7] + h) | 0;\r\n}\r\n\r\nfunction sha256(message, options) {;\r\n  if (message.constructor === String) {\r\n    message = _imports.convertString.UTF8.stringToBytes(message);\r\n  }\r\n\r\n  var H =[ 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\r\n           0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19 ];\r\n\r\n  var m = bytesToWords(message);\r\n  var l = message.length * 8;\r\n\r\n  m[l >> 5] |= 0x80 << (24 - l % 32);\r\n  m[((l + 64 >> 9) << 4) + 15] = l;\r\n\r\n  for (var i=0 ; i<m.length; i += 16) {\r\n    processBlock(H, m, i);\r\n  }\r\n\r\n  var digestbytes = wordsToBytes(H);\r\n  return options && options.asBytes ? digestbytes :\r\n         options && options.asString ? _imports.convertString.bytesToString(digestbytes) :\r\n         _imports.bytesToHex(digestbytes)\r\n}\r\n\r\nsha256.x2 = function(message, options) {\r\n  return sha256(sha256(message, { asBytes:true }), options)\r\n}\r\n\r\n}(this);\r\n"]},"metadata":{},"sourceType":"script"}